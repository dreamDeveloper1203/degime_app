import 'package:flutter/material.dart';
import 'package:degime_app/src/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.deepOrange300,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.indigoA100,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900.withOpacity(0.6),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Familjen Grotesk',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray40001,
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.3),
          fontSize: 30.fSize,
          fontFamily: 'Familjen Grotesk',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Familjen Grotesk',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Familjen Grotesk',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray700,
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Familjen Grotesk',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF004393),
    primaryContainer: Color(0XFFCCCCCC),

    // Error colors
    errorContainer: Color(0XFF4C4C4C),
    onError: Color(0XFF292F3F),
    onErrorContainer: Color(0XFF000741),

    // On colors(text colors)
    onPrimary: Color(0XCCFFFFFF),
    onPrimaryContainer: Color(0XCC1F232F),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFDD55);
  Color get amber30001 => Color(0XFFFFDB5E);
  Color get amber30002 => Color(0XFFFFDC5D);
  Color get amber30003 => Color(0XFFFFCC4D);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blueA400 => Color(0XFF1877F2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF7A8194);
  Color get blueGray40001 => Color(0XFF8A8A8D);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get blueGray800 => Color(0XFF373E4E);
  Color get blueGray900 => Color(0XFF283544);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFFF8F61);
  Color get deepOrange30001 => Color(0XFFFF7D54);
  Color get deepOrange400 => Color(0XFFDA8C45);

  // DeepPurple
  Color get deepPurpleA200 => Color(0XFF7A54FF);
  Color get deepPurpleA20001 => Color(0XFF9747FF);
  Color get deepPurpleA400 => Color(0XFF4C31F4);
  Color get deepPurpleA40001 => Color(0XFF4C30F3);
  Color get deepPurpleA700 => Color(0XFF2A08F8);

  // Gray
  Color get gray100 => Color(0XFFF2F2F7);
  Color get gray300 => Color(0XFFDADADA);
  Color get gray30001 => Color(0XFFE5E5E5);
  Color get gray30072 => Color(0X72DDDCDC);
  Color get gray400 => Color(0XFFB1B1B1);
  Color get gray40001 => Color(0XFFBDBDBD);
  Color get gray40002 => Color(0XFFB9B9B9);
  Color get gray40003 => Color(0XFFB6B6B9);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFFABABAB);
  Color get gray50001 => Color(0XFFA9A9A9);
  Color get gray50002 => Color(0XFF999999);
  Color get gray600 => Color(0XFF777777);
  Color get gray700 => Color(0XFF54595E);
  Color get gray70001 => Color(0XFF545454);
  Color get gray70002 => Color(0XFF555D6F);
  Color get gray800 => Color(0XFF4E4E4E);
  Color get gray900 => Color(0XFF161515);

  // Green
  Color get greenA700 => Color(0XFF05FF00);

  // Indigo
  Color get indigoA100 => Color(0XFF837DFF);

  // LightBlue
  Color get lightBlue400 => Color(0XFF2AC3FF);
  Color get lightBlueA700 => Color(0XFF0A84FF);
  Color get lightBlueA70001 => Color(0XFF007AFF);

  // LightGreen
  Color get lightGreen500 => Color(0XFF96DA45);

  // Orange
  Color get orange700 => Color(0XFFF18303);

  // Red
  Color get red300 => Color(0XFFFF7272);
  Color get red30001 => Color(0XFFFF6A68);
  Color get red500 => Color(0XFFEB4335);
  Color get redA700 => Color(0XFFFF0000);

  // Teal
  Color get teal500 => Color(0XFF00AC83);

  // Yellow
  Color get yellowA200 => Color(0XFFF9FF00);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
